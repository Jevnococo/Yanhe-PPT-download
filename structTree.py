import os
import sys # Required for redirecting stdout

def write_directory_tree_to_file(root_dir, output_file_path, indent_prefix=""):
    """
    Writes the directory tree structure and counts files and directories to a specified file.
    """
    if not os.path.isdir(root_dir):
        error_message = f"Error: Provided path '{root_dir}' is not a directory or does not exist."
        print(error_message) # Also print to console for immediate feedback
        with open(output_file_path, 'w', encoding='utf-8') as f:
            f.write(error_message + "\n")
        return 0, 0

    original_stdout = sys.stdout  # Save a reference to the original standard output
    with open(output_file_path, 'w', encoding='utf-8') as f:
        sys.stdout = f  # Redirect stdout to the file

        print(f"Directory Tree for: {os.path.abspath(root_dir)}\n")
        total_dirs = 0
        total_files = 0

        # Inner recursive function to build the tree
        def _print_tree_recursive(current_dir, prefix="", level=0):
            nonlocal total_dirs, total_files

            try:
                items = sorted(os.listdir(current_dir)) # Sort for consistent order
            except PermissionError:
                print(f"{prefix}└── [Permission Denied]")
                return
            except FileNotFoundError:
                print(f"{prefix}└── [Path not found during scan]")
                return

            num_items = len(items)
            for i, item_name in enumerate(items):
                path = os.path.join(current_dir, item_name)
                is_last = (i == num_items - 1)
                connector = "└── " if is_last else "├── "

                if os.path.isdir(path):
                    print(f"{prefix}{connector}{item_name}/")
                    total_dirs += 1
                    new_prefix = prefix + ("    " if is_last else "│   ")
                    _print_tree_recursive(path, new_prefix, level + 1)
                else:
                    print(f"{prefix}{connector}{item_name}")
                    total_files += 1

        _print_tree_recursive(root_dir, indent_prefix)

        print(f"\n--- Summary for {os.path.abspath(root_dir)} ---")
        print(f"Total directories found: {total_dirs}")
        print(f"Total files found: {total_files}")
        print(f"\nOutput generated by script.")

        sys.stdout = original_stdout # Reset stdout to its original value
        print(f"Directory tree structure successfully written to: {os.path.abspath(output_file_path)}")

    return total_dirs, total_files

# === USAGE EXAMPLE ===
target_directory = r"D:\GOT-OCR2.0"  # 替换为你的实际路径
output_file = r'C:\Users\JEVNOCOCO\OneDrive\Desktop\Yanhe\tree.txt' # 替换为你想要的输出文件路径

print(f"Attempting to write tree for: {target_directory} to {output_file}")
if os.path.exists(target_directory):
    write_directory_tree_to_file(target_directory, output_file)
else:
    print(f"The path '{target_directory}' does not exist. Please provide a valid path.")
    # Optionally, still write an error message to the output file
    with open(output_file, 'w', encoding='utf-8') as f_err:
        f_err.write(f"Error: The path '{target_directory}' does not exist.\n")